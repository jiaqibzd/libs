on:
  push:
    branches:
      - master
jobs:
  clone_repository:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module:
          - 'cJSON'
          - 'osal'
          - 'unittest'
          - 'trial_manager'
          - 'device_manager'
          - 'data_manager'
    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2.4.0
        with:
          key: ${{ secrets.GITEE_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: GIT-CLONE
        shell: bash
        run: |
          git config --global user.name "robot"
          git config --global user.email "libo_go@163.com"
          git clone git@gitee.com:shubci/libs.git
          mkdir module
          cd module
          if [ "${{ matrix.module }}" = "cJSON" ]; then
            giturl=cjson
          elif [ "${{ matrix.module }}" = "unittest" ]; then
            giturl=Unity
          else
            giturl=${{ matrix.module }}
          fi
          git clone git@gitee.com:shubci/$giturl.git ${{ matrix.module }}
      - name: Create markdown file
        run: |
          cd libs
          echo "| module | compiler | available version | cmake result | build.log |" > result.md
          echo "| :------: | :------: | :------: | :------: | :------: |" >> result.md
      - name: Archive libs
        uses: actions/upload-artifact@v2
        with:
          name: cloned_libs
          path: libs
      - name: Archive module
        uses: actions/upload-artifact@v2
        with:
          name: cloned_module
          path: module
  process_repository:
    needs: clone_repository
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {path: "windows/mingw", os: "windows-latest", command: "-G", compiler: "MinGW Makefiles"}
          - {path: "windows/msvc", os: "windows-latest", command: "-G", compiler: "Visual Studio 17 2022"}
          - {path: "linux", os: "ubuntu-latest", command: "", compiler: ""}
        module:
          - 'cJSON'
          - 'osal'
          - 'unittest'
          - 'trial_manager'
          - 'device_manager'
          - 'data_manager'
      max-parallel: 1
    steps:
      - name: Download cloned_libs
        uses: actions/download-artifact@v2
        with:
          name: cloned_libs
          path: libs
      - name: Download cloned_module
        uses: actions/download-artifact@v2
        with:
          name: cloned_module
          path: module
      - name: BUILD AND INSTALL
        run: |
          cd module/${{ matrix.module }}
          cmake ${{matrix.config.command}} "${{matrix.config.compiler}}" -S . -B ./build 2>&1 | tee ../../libs/dll/${{matrix.config.path}}/${{ matrix.module }}/build.log && cmake --build ./build --target install 2>&1 | tee -a ../../libs/dll/${{matrix.config.path}}/${{ matrix.module }}/build.log
          available_version=$(grep "VERSION" ../../libs/dll/${{ matrix.config.path }}/${{ matrix.module }}/version.txt | cut -d' ' -f2 | tr '\n' '.' | sed 's/\.$//')
          cd ../../libs
          if [ $? -ne 0 ]
          then
            echo "| ${{ matrix.module }} | ${{ matrix.config.path}} | $available_version | <span style=\"color:red\">failed</span> | [build information](/libs/dll/${{ matrix.config.path }}/${{ matrix.module }}/build.log "build.log") |" >> result.md
          else
            echo "| ${{ matrix.module }} | ${{ matrix.config.path}} | $available_version | <span style=\"color:green\">succeeded</span> | [build information](/libs/dll/${{ matrix.config.path }}/${{ matrix.module }}/build.log "build.log") |" >> result.md
          fi
      - name: Archive libs
        uses: actions/upload-artifact@v2
        with:
          name: cloned_libs
          path: libs
  push_repository:
    needs: process_repository
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download cloned_libs
      uses: actions/download-artifact@v2
      with:
        name: cloned_libs
        path: libs
    - name: Download cloned_module
      uses: actions/download-artifact@v2
      with:
        name: cloned_module
        path: module
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2.4.0
      with:
        key: ${{ secrets.GITEE_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
    - name: PUSH
      run: |
        git config --global user.name "robot"
        git config --global user.email "libo_go@163.com"
        git status
        git add --all && git status
        git commit -m "ci: auto build ${{matrix.config.os}} ${{matrix.config.path}} & publish" && git config pull.rebase true && git pull && git push
        git log
