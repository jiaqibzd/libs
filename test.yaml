on:
  push:
    branches:
      - main
jobs:
  clone_repository:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {path: "mingw", os: "windows445", command: "-G", compiler: "MinGW Makefiles"}
        - {path: "msvc", os: "windows445", command: "-G", compiler: "Visual Studio 17 2022"}
        - {path: "linux", os: "linux445", command: "", compiler: ""}
      max-parallel: 1
    steps:
      - name: Git clone
        uses: actions/checkout@v2
      - name: Gitee clone
        shell: bash
        run: |
          git clone --recursive git@gitee.com:HertzLiu/libs.git
          cd libs
          echo "| module | compiler | available version | cmake result | tests_num | failures_num | ignored_num | build.log |" > result.md
          echo "| :------: | :------: | :------: | :------: | :------: | :------: | :------: | :------: |" >> result.md
          resultpath=$(pwd)/result.md
          cd bin/${{matrix.config.path}}
          # 保存libs下编译器路径为currentDirectory
          currentDirectory=$(pwd)
          cd ../../../
          # mkdir module
          git clone --recursive git@gitee.com:HertzLiu/module.git
          cd module
          modulepath=$(pwd)
          modules=( 'cjson' 'unittest' 'osal' 'device_manager' 'drivers/driver_eeg' 'data_manager')
          for modulename in "${modules[@]}"; do
              # git clone --recursive git@gitee.com:shubci/${modulename%/*}.git
              cd $modulename
              # 编译
              cmake ${{matrix.config.command}} "${{matrix.config.compiler}}" -S . -B ./build 2>&1 | tee ${currentDirectory}/build_${modulename##*/}_${{ matrix.config.path }}.log || true
              # 安装
              cmake --build ./build --target install 2>&1 | tee -a ${currentDirectory}/build_${modulename##*/}_${{ matrix.config.path }}.log || true
              # 判断libs内版本与module内版本是否一致
              module_version=$(grep "VERSION" version.txt | cut -d' ' -f2 | tr '\n' '.' | sed 's/\.$//')
              available_version=$(grep "VERSION" ${currentDirectory}/${modulename##*/}_${{ matrix.config.path }}_version.txt | cut -d' ' -f2 | tr '\n' '.' | sed 's/\.$//')
              # 两个版本号不一致，表示编译失败，不进行后续测试
              if [ "$available_version" != "$module_version" ]
                then
                  echo "| ${modulename##*/} | ${{ matrix.config.path}} | $available_version | <span style="color:red">&#x274C; failed</span> | - | - | - | [build information](/bin/${{ matrix.config.path }}/build_${modulename##*/}_${{ matrix.config.path }}.log) |" >> ${resultpath}
              else
                  cd test
                  cmake ${{matrix.config.command}} "${{matrix.config.compiler}}" -S . -B ./build 2>&1 | tee -a ${currentDirectory}/build_${modulename##*/}_${{ matrix.config.path }}.log || true
                  cmake --build ./build --target install 2>&1 | tee -a ${currentDirectory}/build_${modulename##*/}_${{ matrix.config.path }}.log ||true
                  if [ -d "bin" ]; then
                      cd bin
                      test_output=$(./build_test)
                      tests=$(echo "$test_output" | grep -o '[0-9]\+ Tests' | grep -o '[0-9]\+')
                      failures=$(echo "$test_output" | grep -o '[0-9]\+ Failures' | grep -o '[0-9]\+')
                      ignored=$(echo "$test_output" | grep -o '[0-9]\+ Ignored' | grep -o '[0-9]\+')
                      echo "| ${modulename##*/} | ${{ matrix.config.path}} | $available_version | <span style="color:green">&#x2705; succeeded</span> | $tests | $failures | $ignored | [build information](/bin/${{ matrix.config.path }}/build_${modulename##*/}_${{ matrix.config.path }}.log) |" >> ${resultpath}
                  else
                      echo "| ${modulename##*/} | ${{ matrix.config.path}} | $available_version | <span style="color:green">&#x2705; succeeded</span> | - | - | - | [build information](/bin/${{ matrix.config.path }}/build_${modulename##*/}_${{ matrix.config.path }}.log) |" >> ${resultpath}
                  fi
              fi
              cd $modulepath
          done